// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pos/pos_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Cafelogos_Pos_ProductType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case coffee // = 0
  case other // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .coffee
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .coffee
    case 1: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .coffee: return 0
    case .other: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cafelogos_Pos_ProductType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cafelogos_Pos_ProductType] = [
    .coffee,
    .other,
  ]
}

#endif  // swift(>=4.2)

///* Order 
public enum Cafelogos_Pos_OrderType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case eatIn // = 0
  case takeOut // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .eatIn
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eatIn
    case 1: self = .takeOut
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .eatIn: return 0
    case .takeOut: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cafelogos_Pos_OrderType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cafelogos_Pos_OrderType] = [
    .eatIn,
    .takeOut,
  ]
}

#endif  // swift(>=4.2)

public enum Cafelogos_Pos_DiscountType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case price // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .price
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .price
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .price: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Cafelogos_Pos_DiscountType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cafelogos_Pos_DiscountType] = [
    .price,
  ]
}

#endif  // swift(>=4.2)

///*
/// Request/Response
public struct Cafelogos_Pos_GetOrdersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetOrdersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orders: [Cafelogos_Pos_Order] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var order: Cafelogos_Pos_Order {
    get {return _order ?? Cafelogos_Pos_Order()}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  public var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  public mutating func clearOrder() {self._order = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _order: Cafelogos_Pos_Order? = nil
}

public struct Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seatID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var order: Cafelogos_Pos_OrderParam {
    get {return _order ?? Cafelogos_Pos_OrderParam()}
    set {_order = newValue}
  }
  /// Returns true if `order` has been explicitly set.
  public var hasOrder: Bool {return self._order != nil}
  /// Clears the value of `order`. Subsequent reads from it will return its default value.
  public mutating func clearOrder() {self._order = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _order: Cafelogos_Pos_OrderParam? = nil
}

public struct Cafelogos_Pos_PostOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: Cafelogos_Pos_PostOrderResponse.Code = .ok

  public var errorMessage: String = String()

  public var callNumber: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Code: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case ok // = 0
    case soldOutProduct // = 1
    case notSoldProduct // = 2
    case other // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .ok
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ok
      case 1: self = .soldOutProduct
      case 2: self = .notSoldProduct
      case 3: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .ok: return 0
      case .soldOutProduct: return 1
      case .notSoldProduct: return 2
      case .other: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cafelogos_Pos_PostOrderResponse.Code: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cafelogos_Pos_PostOrderResponse.Code] = [
    .ok,
    .soldOutProduct,
    .notSoldProduct,
    .other,
  ]
}

#endif  // swift(>=4.2)

public struct Cafelogos_Pos_PostPaymentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payment: Cafelogos_Pos_Payment {
    get {return _payment ?? Cafelogos_Pos_Payment()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  public var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  public mutating func clearPayment() {self._payment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payment: Cafelogos_Pos_Payment? = nil
}

public struct Cafelogos_Pos_UpdatePaymentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payment: Cafelogos_Pos_Payment {
    get {return _payment ?? Cafelogos_Pos_Payment()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  public var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  public mutating func clearPayment() {self._payment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payment: Cafelogos_Pos_Payment? = nil
}

public struct Cafelogos_Pos_PaymentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isOk: Bool = false

  public var payment: Cafelogos_Pos_Payment {
    get {return _payment ?? Cafelogos_Pos_Payment()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  public var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  public mutating func clearPayment() {self._payment = nil}

  public var orderResponses: [Cafelogos_Pos_PostOrderResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _payment: Cafelogos_Pos_Payment? = nil
}

public struct Cafelogos_Pos_DeleteOrderRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var orderID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetProductsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var products: [Cafelogos_Pos_Product] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetProductCategoriesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productCategories: [Cafelogos_Pos_ProductCategory] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostProductCategoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostProductRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var product: Cafelogos_Pos_ProductParam {
    get {return _product ?? Cafelogos_Pos_ProductParam()}
    set {_product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return self._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {self._product = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _product: Cafelogos_Pos_ProductParam? = nil
}

public struct Cafelogos_Pos_UpdateProductRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String = String()

  public var product: Cafelogos_Pos_ProductParam {
    get {return _product ?? Cafelogos_Pos_ProductParam()}
    set {_product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return self._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {self._product = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _product: Cafelogos_Pos_ProductParam? = nil
}

public struct Cafelogos_Pos_DeleteProductRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostStockRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var quantity: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetStocksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stocks: [Cafelogos_Pos_Stock] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostCoffeeBeanRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var gramQuantity: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetCoffeeBeansResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var coffeeBeans: [Cafelogos_Pos_CoffeeBean] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostSeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_UpdateSeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seat: Cafelogos_Pos_Seat {
    get {return _seat ?? Cafelogos_Pos_Seat()}
    set {_seat = newValue}
  }
  /// Returns true if `seat` has been explicitly set.
  public var hasSeat: Bool {return self._seat != nil}
  /// Clears the value of `seat`. Subsequent reads from it will return its default value.
  public mutating func clearSeat() {self._seat = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _seat: Cafelogos_Pos_Seat? = nil
}

public struct Cafelogos_Pos_GetSeatsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seats: [Cafelogos_Pos_Seat] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostNewClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostNewClientResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_UpdateClientRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_GetDiscountsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var discounts: [Cafelogos_Pos_Discount] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_PostDiscountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var type: Cafelogos_Pos_DiscountType = .price

  public var discountPrice: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///* Product 
public struct Cafelogos_Pos_Product {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String {
    get {return _storage._productID}
    set {_uniqueStorage()._productID = newValue}
  }

  public var productName: String {
    get {return _storage._productName}
    set {_uniqueStorage()._productName = newValue}
  }

  public var productCategory: Cafelogos_Pos_ProductCategory {
    get {return _storage._productCategory ?? Cafelogos_Pos_ProductCategory()}
    set {_uniqueStorage()._productCategory = newValue}
  }
  /// Returns true if `productCategory` has been explicitly set.
  public var hasProductCategory: Bool {return _storage._productCategory != nil}
  /// Clears the value of `productCategory`. Subsequent reads from it will return its default value.
  public mutating func clearProductCategory() {_uniqueStorage()._productCategory = nil}

  public var productType: Cafelogos_Pos_ProductType {
    get {return _storage._productType}
    set {_uniqueStorage()._productType = newValue}
  }

  public var productColor: String {
    get {return _storage._productColor}
    set {_uniqueStorage()._productColor = newValue}
  }

  public var isNowSales: Bool {
    get {return _storage._isNowSales}
    set {_uniqueStorage()._isNowSales = newValue}
  }

  public var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  public var updatedAt: String {
    get {return _storage._updatedAt}
    set {_uniqueStorage()._updatedAt = newValue}
  }

  /// Only Coffee
  public var coffeeBean: Cafelogos_Pos_CoffeeBean {
    get {return _storage._coffeeBean ?? Cafelogos_Pos_CoffeeBean()}
    set {_uniqueStorage()._coffeeBean = newValue}
  }
  /// Returns true if `coffeeBean` has been explicitly set.
  public var hasCoffeeBean: Bool {return _storage._coffeeBean != nil}
  /// Clears the value of `coffeeBean`. Subsequent reads from it will return its default value.
  public mutating func clearCoffeeBean() {_uniqueStorage()._coffeeBean = nil}

  public var coffeeBrews: [Cafelogos_Pos_CoffeeBrew] {
    get {return _storage._coffeeBrews}
    set {_uniqueStorage()._coffeeBrews = newValue}
  }

  /// Only Other
  public var amount: UInt64 {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var stock: Cafelogos_Pos_Stock {
    get {return _storage._stock ?? Cafelogos_Pos_Stock()}
    set {_uniqueStorage()._stock = newValue}
  }
  /// Returns true if `stock` has been explicitly set.
  public var hasStock: Bool {return _storage._stock != nil}
  /// Clears the value of `stock`. Subsequent reads from it will return its default value.
  public mutating func clearStock() {_uniqueStorage()._stock = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Cafelogos_Pos_ProductParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productName: String = String()

  public var productCategoryID: String = String()

  public var productType: Cafelogos_Pos_ProductType = .coffee

  public var isNowSales: Bool = false

  public var productColor: String = String()

  /// Only Coffee
  public var coffeeBeanID: String = String()

  public var coffeeBrews: [Cafelogos_Pos_CoffeeBrew] = []

  /// Only Other
  public var amount: UInt64 = 0

  public var stockID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_ProductCategory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var createdAt: String = String()

  public var updatedAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_CoffeeBean {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var gramQuantity: Int32 = 0

  public var createdAt: String = String()

  public var updatedAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_CoffeeBrew {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var beanQuantityGrams: UInt32 = 0

  public var amount: UInt64 = 0

  public var createdAt: String = String()

  public var updatedAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_Stock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var quantity: UInt32 = 0

  public var createdAt: String = String()

  public var updatedAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_Order {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var items: [Cafelogos_Pos_OrderItem] = []

  public var discounts: [Cafelogos_Pos_OrderDiscount] = []

  public var orderType: Cafelogos_Pos_OrderType = .eatIn

  public var orderAt: String = String()

  public var callNumber: String = String()

  public var clientID: String = String()

  public var seatName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_OrderParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///* 代入した場合は代入したIDが使用され、しなかったら生成される 
  public var id: String = String()

  public var items: [Cafelogos_Pos_OrderItem] = []

  public var discounts: [Cafelogos_Pos_OrderDiscount] = []

  public var orderType: Cafelogos_Pos_OrderType = .eatIn

  public var orderAt: String = String()

  public var clientID: String = String()

  public var seatID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_OrderItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productID: String = String()

  public var quantity: UInt32 = 0

  public var amount: UInt64 = 0

  public var coffeeBrewID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_OrderDiscount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///* 一旦何も入ってない 
  public var id: String = String()

  public var discountID: String = String()

  public var type: Cafelogos_Pos_DiscountType = .price

  public var discountPrice: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_Discount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var type: Cafelogos_Pos_DiscountType = .price

  public var discountPrice: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Cafelogos_Pos_Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var type: Cafelogos_Pos_Payment.PaymentType = .cash

  public var receiveAmount: UInt64 = 0

  public var paymentAmount: UInt64 = 0

  public var changeAmount: UInt64 = 0

  public var paymentAt: String = String()

  public var updatedAt: String = String()

  public var postOrders: [Cafelogos_Pos_OrderParam] = []

  public var orderIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum PaymentType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case cash // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .cash
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .cash
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .cash: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Cafelogos_Pos_Payment.PaymentType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Cafelogos_Pos_Payment.PaymentType] = [
    .cash,
  ]
}

#endif  // swift(>=4.2)

public struct Cafelogos_Pos_Seat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Cafelogos_Pos_ProductType: @unchecked Sendable {}
extension Cafelogos_Pos_OrderType: @unchecked Sendable {}
extension Cafelogos_Pos_DiscountType: @unchecked Sendable {}
extension Cafelogos_Pos_GetOrdersRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetOrdersResponse: @unchecked Sendable {}
extension Cafelogos_Pos_GetOrderResponse: @unchecked Sendable {}
extension Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PostOrderRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PostOrderResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostOrderResponse.Code: @unchecked Sendable {}
extension Cafelogos_Pos_PostPaymentRequest: @unchecked Sendable {}
extension Cafelogos_Pos_UpdatePaymentRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PaymentResponse: @unchecked Sendable {}
extension Cafelogos_Pos_DeleteOrderRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetProductsResponse: @unchecked Sendable {}
extension Cafelogos_Pos_GetProductCategoriesResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostProductCategoryRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PostProductRequest: @unchecked Sendable {}
extension Cafelogos_Pos_UpdateProductRequest: @unchecked Sendable {}
extension Cafelogos_Pos_DeleteProductRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PostStockRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetStocksResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostCoffeeBeanRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetCoffeeBeansResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostSeatRequest: @unchecked Sendable {}
extension Cafelogos_Pos_UpdateSeatRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetSeatsResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostNewClientRequest: @unchecked Sendable {}
extension Cafelogos_Pos_PostNewClientResponse: @unchecked Sendable {}
extension Cafelogos_Pos_UpdateClientRequest: @unchecked Sendable {}
extension Cafelogos_Pos_GetDiscountsResponse: @unchecked Sendable {}
extension Cafelogos_Pos_PostDiscountRequest: @unchecked Sendable {}
extension Cafelogos_Pos_Product: @unchecked Sendable {}
extension Cafelogos_Pos_ProductParam: @unchecked Sendable {}
extension Cafelogos_Pos_ProductCategory: @unchecked Sendable {}
extension Cafelogos_Pos_CoffeeBean: @unchecked Sendable {}
extension Cafelogos_Pos_CoffeeBrew: @unchecked Sendable {}
extension Cafelogos_Pos_Stock: @unchecked Sendable {}
extension Cafelogos_Pos_Order: @unchecked Sendable {}
extension Cafelogos_Pos_OrderParam: @unchecked Sendable {}
extension Cafelogos_Pos_OrderItem: @unchecked Sendable {}
extension Cafelogos_Pos_OrderDiscount: @unchecked Sendable {}
extension Cafelogos_Pos_Discount: @unchecked Sendable {}
extension Cafelogos_Pos_Payment: @unchecked Sendable {}
extension Cafelogos_Pos_Payment.PaymentType: @unchecked Sendable {}
extension Cafelogos_Pos_Seat: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cafelogos.pos"

extension Cafelogos_Pos_ProductType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COFFEE"),
    1: .same(proto: "OTHER"),
  ]
}

extension Cafelogos_Pos_OrderType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EatIn"),
    1: .same(proto: "TakeOut"),
  ]
}

extension Cafelogos_Pos_DiscountType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICE"),
  ]
}

extension Cafelogos_Pos_GetOrdersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrdersRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetOrdersRequest, rhs: Cafelogos_Pos_GetOrdersRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetOrdersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrdersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.orders) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetOrdersResponse, rhs: Cafelogos_Pos_GetOrdersResponse) -> Bool {
    if lhs.orders != rhs.orders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrderResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._order {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetOrderResponse, rhs: Cafelogos_Pos_GetOrderResponse) -> Bool {
    if lhs._order != rhs._order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetUnpaidOrdersBySeatIdRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "seat_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.seatID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest, rhs: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest) -> Bool {
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._order {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostOrderRequest, rhs: Cafelogos_Pos_PostOrderRequest) -> Bool {
    if lhs._order != rhs._order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostOrderResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .standard(proto: "error_message"),
    3: .standard(proto: "call_number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.callNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .ok {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    if !self.callNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.callNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostOrderResponse, rhs: Cafelogos_Pos_PostOrderResponse) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.callNumber != rhs.callNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostOrderResponse.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "SOLD_OUT_PRODUCT"),
    2: .same(proto: "NOT_SOLD_PRODUCT"),
    3: .same(proto: "OTHER"),
  ]
}

extension Cafelogos_Pos_PostPaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostPaymentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostPaymentRequest, rhs: Cafelogos_Pos_PostPaymentRequest) -> Bool {
    if lhs._payment != rhs._payment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_UpdatePaymentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdatePaymentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_UpdatePaymentRequest, rhs: Cafelogos_Pos_UpdatePaymentRequest) -> Bool {
    if lhs._payment != rhs._payment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PaymentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PaymentResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_ok"),
    2: .same(proto: "payment"),
    3: .standard(proto: "order_responses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isOk) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.orderResponses) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.isOk != false {
      try visitor.visitSingularBoolField(value: self.isOk, fieldNumber: 1)
    }
    try { if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.orderResponses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderResponses, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PaymentResponse, rhs: Cafelogos_Pos_PaymentResponse) -> Bool {
    if lhs.isOk != rhs.isOk {return false}
    if lhs._payment != rhs._payment {return false}
    if lhs.orderResponses != rhs.orderResponses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_DeleteOrderRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteOrderRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_DeleteOrderRequest, rhs: Cafelogos_Pos_DeleteOrderRequest) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetProductsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProductsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.products) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetProductsResponse, rhs: Cafelogos_Pos_GetProductsResponse) -> Bool {
    if lhs.products != rhs.products {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetProductCategoriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProductCategoriesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_categories"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.productCategories) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productCategories.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productCategories, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetProductCategoriesResponse, rhs: Cafelogos_Pos_GetProductCategoriesResponse) -> Bool {
    if lhs.productCategories != rhs.productCategories {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostProductCategoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostProductCategoryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostProductCategoryRequest, rhs: Cafelogos_Pos_PostProductCategoryRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostProductRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostProductRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "product"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostProductRequest, rhs: Cafelogos_Pos_PostProductRequest) -> Bool {
    if lhs._product != rhs._product {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_UpdateProductRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateProductRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .same(proto: "product"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._product) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    try { if let v = self._product {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_UpdateProductRequest, rhs: Cafelogos_Pos_UpdateProductRequest) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs._product != rhs._product {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_DeleteProductRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteProductRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_DeleteProductRequest, rhs: Cafelogos_Pos_DeleteProductRequest) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostStockRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostStockRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostStockRequest, rhs: Cafelogos_Pos_PostStockRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetStocksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStocksResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.stocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stocks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetStocksResponse, rhs: Cafelogos_Pos_GetStocksResponse) -> Bool {
    if lhs.stocks != rhs.stocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostCoffeeBeanRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostCoffeeBeanRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "gram_quantity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.gramQuantity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.gramQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.gramQuantity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostCoffeeBeanRequest, rhs: Cafelogos_Pos_PostCoffeeBeanRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.gramQuantity != rhs.gramQuantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetCoffeeBeansResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCoffeeBeansResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "coffee_beans"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.coffeeBeans) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.coffeeBeans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coffeeBeans, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetCoffeeBeansResponse, rhs: Cafelogos_Pos_GetCoffeeBeansResponse) -> Bool {
    if lhs.coffeeBeans != rhs.coffeeBeans {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostSeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostSeatRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostSeatRequest, rhs: Cafelogos_Pos_PostSeatRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_UpdateSeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSeatRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seat"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._seat) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._seat {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_UpdateSeatRequest, rhs: Cafelogos_Pos_UpdateSeatRequest) -> Bool {
    if lhs._seat != rhs._seat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetSeatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetSeatsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.seats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.seats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetSeatsResponse, rhs: Cafelogos_Pos_GetSeatsResponse) -> Bool {
    if lhs.seats != rhs.seats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostNewClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostNewClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostNewClientRequest, rhs: Cafelogos_Pos_PostNewClientRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostNewClientResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostNewClientResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostNewClientResponse, rhs: Cafelogos_Pos_PostNewClientResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_UpdateClientRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateClientRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_UpdateClientRequest, rhs: Cafelogos_Pos_UpdateClientRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_GetDiscountsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDiscountsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.discounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.discounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discounts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_GetDiscountsResponse, rhs: Cafelogos_Pos_GetDiscountsResponse) -> Bool {
    if lhs.discounts != rhs.discounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_PostDiscountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostDiscountRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .standard(proto: "discount_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.discountPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .price {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.discountPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.discountPrice, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_PostDiscountRequest, rhs: Cafelogos_Pos_PostDiscountRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.discountPrice != rhs.discountPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Product: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Product"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .standard(proto: "product_name"),
    3: .standard(proto: "product_category"),
    4: .standard(proto: "product_type"),
    5: .standard(proto: "product_color"),
    6: .standard(proto: "is_now_sales"),
    7: .standard(proto: "created_at"),
    8: .standard(proto: "updated_at"),
    9: .standard(proto: "coffee_bean"),
    10: .standard(proto: "coffee_brews"),
    11: .same(proto: "amount"),
    12: .same(proto: "stock"),
  ]

  fileprivate class _StorageClass {
    var _productID: String = String()
    var _productName: String = String()
    var _productCategory: Cafelogos_Pos_ProductCategory? = nil
    var _productType: Cafelogos_Pos_ProductType = .coffee
    var _productColor: String = String()
    var _isNowSales: Bool = false
    var _createdAt: String = String()
    var _updatedAt: String = String()
    var _coffeeBean: Cafelogos_Pos_CoffeeBean? = nil
    var _coffeeBrews: [Cafelogos_Pos_CoffeeBrew] = []
    var _amount: UInt64 = 0
    var _stock: Cafelogos_Pos_Stock? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _productID = source._productID
      _productName = source._productName
      _productCategory = source._productCategory
      _productType = source._productType
      _productColor = source._productColor
      _isNowSales = source._isNowSales
      _createdAt = source._createdAt
      _updatedAt = source._updatedAt
      _coffeeBean = source._coffeeBean
      _coffeeBrews = source._coffeeBrews
      _amount = source._amount
      _stock = source._stock
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._productID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._productName) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._productCategory) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._productType) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._productColor) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isNowSales) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._createdAt) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._updatedAt) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._coffeeBean) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._coffeeBrews) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._amount) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._stock) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._productID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productID, fieldNumber: 1)
      }
      if !_storage._productName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productName, fieldNumber: 2)
      }
      try { if let v = _storage._productCategory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._productType != .coffee {
        try visitor.visitSingularEnumField(value: _storage._productType, fieldNumber: 4)
      }
      if !_storage._productColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._productColor, fieldNumber: 5)
      }
      if _storage._isNowSales != false {
        try visitor.visitSingularBoolField(value: _storage._isNowSales, fieldNumber: 6)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 7)
      }
      if !_storage._updatedAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updatedAt, fieldNumber: 8)
      }
      try { if let v = _storage._coffeeBean {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._coffeeBrews.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._coffeeBrews, fieldNumber: 10)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._amount, fieldNumber: 11)
      }
      try { if let v = _storage._stock {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Product, rhs: Cafelogos_Pos_Product) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._productID != rhs_storage._productID {return false}
        if _storage._productName != rhs_storage._productName {return false}
        if _storage._productCategory != rhs_storage._productCategory {return false}
        if _storage._productType != rhs_storage._productType {return false}
        if _storage._productColor != rhs_storage._productColor {return false}
        if _storage._isNowSales != rhs_storage._isNowSales {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._coffeeBean != rhs_storage._coffeeBean {return false}
        if _storage._coffeeBrews != rhs_storage._coffeeBrews {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._stock != rhs_storage._stock {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_ProductParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_name"),
    2: .standard(proto: "product_category_id"),
    3: .standard(proto: "product_type"),
    4: .standard(proto: "is_now_sales"),
    5: .standard(proto: "product_color"),
    6: .standard(proto: "coffee_bean_id"),
    7: .standard(proto: "coffee_brews"),
    8: .same(proto: "amount"),
    9: .standard(proto: "stock_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.productCategoryID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.productType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isNowSales) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.productColor) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.coffeeBeanID) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.coffeeBrews) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.stockID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productName.isEmpty {
      try visitor.visitSingularStringField(value: self.productName, fieldNumber: 1)
    }
    if !self.productCategoryID.isEmpty {
      try visitor.visitSingularStringField(value: self.productCategoryID, fieldNumber: 2)
    }
    if self.productType != .coffee {
      try visitor.visitSingularEnumField(value: self.productType, fieldNumber: 3)
    }
    if self.isNowSales != false {
      try visitor.visitSingularBoolField(value: self.isNowSales, fieldNumber: 4)
    }
    if !self.productColor.isEmpty {
      try visitor.visitSingularStringField(value: self.productColor, fieldNumber: 5)
    }
    if !self.coffeeBeanID.isEmpty {
      try visitor.visitSingularStringField(value: self.coffeeBeanID, fieldNumber: 6)
    }
    if !self.coffeeBrews.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coffeeBrews, fieldNumber: 7)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 8)
    }
    if !self.stockID.isEmpty {
      try visitor.visitSingularStringField(value: self.stockID, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_ProductParam, rhs: Cafelogos_Pos_ProductParam) -> Bool {
    if lhs.productName != rhs.productName {return false}
    if lhs.productCategoryID != rhs.productCategoryID {return false}
    if lhs.productType != rhs.productType {return false}
    if lhs.isNowSales != rhs.isNowSales {return false}
    if lhs.productColor != rhs.productColor {return false}
    if lhs.coffeeBeanID != rhs.coffeeBeanID {return false}
    if lhs.coffeeBrews != rhs.coffeeBrews {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.stockID != rhs.stockID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_ProductCategory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductCategory"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 3)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_ProductCategory, rhs: Cafelogos_Pos_ProductCategory) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_CoffeeBean: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CoffeeBean"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "gram_quantity"),
    4: .standard(proto: "created_at"),
    5: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.gramQuantity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.gramQuantity != 0 {
      try visitor.visitSingularInt32Field(value: self.gramQuantity, fieldNumber: 3)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 4)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_CoffeeBean, rhs: Cafelogos_Pos_CoffeeBean) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.gramQuantity != rhs.gramQuantity {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_CoffeeBrew: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CoffeeBrew"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "bean_quantity_grams"),
    4: .same(proto: "amount"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.beanQuantityGrams) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.beanQuantityGrams != 0 {
      try visitor.visitSingularUInt32Field(value: self.beanQuantityGrams, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 4)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 5)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_CoffeeBrew, rhs: Cafelogos_Pos_CoffeeBrew) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.beanQuantityGrams != rhs.beanQuantityGrams {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Stock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Stock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "quantity"),
    4: .standard(proto: "created_at"),
    5: .standard(proto: "updated_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 3)
    }
    if !self.createdAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createdAt, fieldNumber: 4)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Stock, rhs: Cafelogos_Pos_Stock) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Order"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "items"),
    3: .same(proto: "discounts"),
    4: .standard(proto: "order_type"),
    5: .standard(proto: "order_at"),
    6: .standard(proto: "call_number"),
    7: .standard(proto: "client_id"),
    8: .standard(proto: "seat_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.discounts) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.orderType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.orderAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.callNumber) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.seatName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.discounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discounts, fieldNumber: 3)
    }
    if self.orderType != .eatIn {
      try visitor.visitSingularEnumField(value: self.orderType, fieldNumber: 4)
    }
    if !self.orderAt.isEmpty {
      try visitor.visitSingularStringField(value: self.orderAt, fieldNumber: 5)
    }
    if !self.callNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.callNumber, fieldNumber: 6)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 7)
    }
    if !self.seatName.isEmpty {
      try visitor.visitSingularStringField(value: self.seatName, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Order, rhs: Cafelogos_Pos_Order) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.items != rhs.items {return false}
    if lhs.discounts != rhs.discounts {return false}
    if lhs.orderType != rhs.orderType {return false}
    if lhs.orderAt != rhs.orderAt {return false}
    if lhs.callNumber != rhs.callNumber {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.seatName != rhs.seatName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_OrderParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderParam"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "items"),
    3: .same(proto: "discounts"),
    4: .standard(proto: "order_type"),
    5: .standard(proto: "order_at"),
    6: .standard(proto: "client_id"),
    7: .standard(proto: "seat_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.discounts) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.orderType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.orderAt) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.seatID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    if !self.discounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discounts, fieldNumber: 3)
    }
    if self.orderType != .eatIn {
      try visitor.visitSingularEnumField(value: self.orderType, fieldNumber: 4)
    }
    if !self.orderAt.isEmpty {
      try visitor.visitSingularStringField(value: self.orderAt, fieldNumber: 5)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 6)
    }
    if !self.seatID.isEmpty {
      try visitor.visitSingularStringField(value: self.seatID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_OrderParam, rhs: Cafelogos_Pos_OrderParam) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.items != rhs.items {return false}
    if lhs.discounts != rhs.discounts {return false}
    if lhs.orderType != rhs.orderType {return false}
    if lhs.orderAt != rhs.orderAt {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.seatID != rhs.seatID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_OrderItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "product_id"),
    2: .same(proto: "quantity"),
    3: .same(proto: "amount"),
    4: .standard(proto: "coffee_brew_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.productID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.quantity) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.coffeeBrewID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productID.isEmpty {
      try visitor.visitSingularStringField(value: self.productID, fieldNumber: 1)
    }
    if self.quantity != 0 {
      try visitor.visitSingularUInt32Field(value: self.quantity, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if !self.coffeeBrewID.isEmpty {
      try visitor.visitSingularStringField(value: self.coffeeBrewID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_OrderItem, rhs: Cafelogos_Pos_OrderItem) -> Bool {
    if lhs.productID != rhs.productID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.coffeeBrewID != rhs.coffeeBrewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_OrderDiscount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OrderDiscount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "discount_id"),
    3: .same(proto: "type"),
    4: .standard(proto: "discount_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.discountID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.discountPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.discountID.isEmpty {
      try visitor.visitSingularStringField(value: self.discountID, fieldNumber: 2)
    }
    if self.type != .price {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.discountPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.discountPrice, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_OrderDiscount, rhs: Cafelogos_Pos_OrderDiscount) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.discountID != rhs.discountID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.discountPrice != rhs.discountPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Discount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Discount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .standard(proto: "discount_price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.discountPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .price {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.discountPrice != 0 {
      try visitor.visitSingularUInt64Field(value: self.discountPrice, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Discount, rhs: Cafelogos_Pos_Discount) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.discountPrice != rhs.discountPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Payment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .standard(proto: "receive_amount"),
    4: .standard(proto: "payment_amount"),
    5: .standard(proto: "change_amount"),
    6: .standard(proto: "payment_at"),
    7: .standard(proto: "updated_at"),
    8: .standard(proto: "post_orders"),
    9: .standard(proto: "order_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.receiveAmount) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.paymentAmount) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.changeAmount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.paymentAt) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.postOrders) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.orderIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .cash {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.receiveAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.receiveAmount, fieldNumber: 3)
    }
    if self.paymentAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.paymentAmount, fieldNumber: 4)
    }
    if self.changeAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.changeAmount, fieldNumber: 5)
    }
    if !self.paymentAt.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentAt, fieldNumber: 6)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 7)
    }
    if !self.postOrders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.postOrders, fieldNumber: 8)
    }
    if !self.orderIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.orderIds, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Payment, rhs: Cafelogos_Pos_Payment) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.receiveAmount != rhs.receiveAmount {return false}
    if lhs.paymentAmount != rhs.paymentAmount {return false}
    if lhs.changeAmount != rhs.changeAmount {return false}
    if lhs.paymentAt != rhs.paymentAt {return false}
    if lhs.updatedAt != rhs.updatedAt {return false}
    if lhs.postOrders != rhs.postOrders {return false}
    if lhs.orderIds != rhs.orderIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cafelogos_Pos_Payment.PaymentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CASH"),
  ]
}

extension Cafelogos_Pos_Seat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Seat"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Cafelogos_Pos_Seat, rhs: Cafelogos_Pos_Seat) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
