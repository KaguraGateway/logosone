// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ticket/ticket_service.proto

package ticketconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	ticket "github.com/KaguraGateway/cafelogos-grpc/pkg/ticket"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TicketServiceName is the fully-qualified name of the TicketService service.
	TicketServiceName = "cafelogos.ticket.TicketService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TicketServiceIssueTicketProcedure is the fully-qualified name of the TicketService's IssueTicket
	// RPC.
	TicketServiceIssueTicketProcedure = "/cafelogos.ticket.TicketService/IssueTicket"
	// TicketServiceRevokeTicketProcedure is the fully-qualified name of the TicketService's
	// RevokeTicket RPC.
	TicketServiceRevokeTicketProcedure = "/cafelogos.ticket.TicketService/RevokeTicket"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ticketServiceServiceDescriptor            = ticket.File_ticket_ticket_service_proto.Services().ByName("TicketService")
	ticketServiceIssueTicketMethodDescriptor  = ticketServiceServiceDescriptor.Methods().ByName("IssueTicket")
	ticketServiceRevokeTicketMethodDescriptor = ticketServiceServiceDescriptor.Methods().ByName("RevokeTicket")
)

// TicketServiceClient is a client for the cafelogos.ticket.TicketService service.
type TicketServiceClient interface {
	IssueTicket(context.Context, *connect.Request[ticket.RequestIssueTicket]) (*connect.Response[ticket.ResponseIssueTicket], error)
	RevokeTicket(context.Context, *connect.Request[ticket.RequestRevokeTicket]) (*connect.Response[ticket.ResponseRevokeTicket], error)
}

// NewTicketServiceClient constructs a client for the cafelogos.ticket.TicketService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTicketServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TicketServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ticketServiceClient{
		issueTicket: connect.NewClient[ticket.RequestIssueTicket, ticket.ResponseIssueTicket](
			httpClient,
			baseURL+TicketServiceIssueTicketProcedure,
			connect.WithSchema(ticketServiceIssueTicketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revokeTicket: connect.NewClient[ticket.RequestRevokeTicket, ticket.ResponseRevokeTicket](
			httpClient,
			baseURL+TicketServiceRevokeTicketProcedure,
			connect.WithSchema(ticketServiceRevokeTicketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ticketServiceClient implements TicketServiceClient.
type ticketServiceClient struct {
	issueTicket  *connect.Client[ticket.RequestIssueTicket, ticket.ResponseIssueTicket]
	revokeTicket *connect.Client[ticket.RequestRevokeTicket, ticket.ResponseRevokeTicket]
}

// IssueTicket calls cafelogos.ticket.TicketService.IssueTicket.
func (c *ticketServiceClient) IssueTicket(ctx context.Context, req *connect.Request[ticket.RequestIssueTicket]) (*connect.Response[ticket.ResponseIssueTicket], error) {
	return c.issueTicket.CallUnary(ctx, req)
}

// RevokeTicket calls cafelogos.ticket.TicketService.RevokeTicket.
func (c *ticketServiceClient) RevokeTicket(ctx context.Context, req *connect.Request[ticket.RequestRevokeTicket]) (*connect.Response[ticket.ResponseRevokeTicket], error) {
	return c.revokeTicket.CallUnary(ctx, req)
}

// TicketServiceHandler is an implementation of the cafelogos.ticket.TicketService service.
type TicketServiceHandler interface {
	IssueTicket(context.Context, *connect.Request[ticket.RequestIssueTicket]) (*connect.Response[ticket.ResponseIssueTicket], error)
	RevokeTicket(context.Context, *connect.Request[ticket.RequestRevokeTicket]) (*connect.Response[ticket.ResponseRevokeTicket], error)
}

// NewTicketServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTicketServiceHandler(svc TicketServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ticketServiceIssueTicketHandler := connect.NewUnaryHandler(
		TicketServiceIssueTicketProcedure,
		svc.IssueTicket,
		connect.WithSchema(ticketServiceIssueTicketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketServiceRevokeTicketHandler := connect.NewUnaryHandler(
		TicketServiceRevokeTicketProcedure,
		svc.RevokeTicket,
		connect.WithSchema(ticketServiceRevokeTicketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cafelogos.ticket.TicketService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TicketServiceIssueTicketProcedure:
			ticketServiceIssueTicketHandler.ServeHTTP(w, r)
		case TicketServiceRevokeTicketProcedure:
			ticketServiceRevokeTicketHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTicketServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTicketServiceHandler struct{}

func (UnimplementedTicketServiceHandler) IssueTicket(context.Context, *connect.Request[ticket.RequestIssueTicket]) (*connect.Response[ticket.ResponseIssueTicket], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.ticket.TicketService.IssueTicket is not implemented"))
}

func (UnimplementedTicketServiceHandler) RevokeTicket(context.Context, *connect.Request[ticket.RequestRevokeTicket]) (*connect.Response[ticket.ResponseRevokeTicket], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cafelogos.ticket.TicketService.RevokeTicket is not implemented"))
}
