// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file pos/pos_service.proto (package cafelogos.pos, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum cafelogos.pos.ProductType
 */
export enum ProductType {
  /**
   * @generated from enum value: COFFEE = 0;
   */
  COFFEE = 0,

  /**
   * @generated from enum value: OTHER = 1;
   */
  OTHER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ProductType)
proto3.util.setEnumType(ProductType, "cafelogos.pos.ProductType", [
  { no: 0, name: "COFFEE" },
  { no: 1, name: "OTHER" },
]);

/**
 * * Order 
 *
 * @generated from enum cafelogos.pos.OrderType
 */
export enum OrderType {
  /**
   * @generated from enum value: EatIn = 0;
   */
  EatIn = 0,

  /**
   * @generated from enum value: TakeOut = 1;
   */
  TakeOut = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(OrderType)
proto3.util.setEnumType(OrderType, "cafelogos.pos.OrderType", [
  { no: 0, name: "EatIn" },
  { no: 1, name: "TakeOut" },
]);

/**
 * @generated from enum cafelogos.pos.DiscountType
 */
export enum DiscountType {
  /**
   * @generated from enum value: PRICE = 0;
   */
  PRICE = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(DiscountType)
proto3.util.setEnumType(DiscountType, "cafelogos.pos.DiscountType", [
  { no: 0, name: "PRICE" },
]);

/**
 * *
 * Request/Response
 *
 * @generated from message cafelogos.pos.GetOrdersRequest
 */
export class GetOrdersRequest extends Message<GetOrdersRequest> {
  constructor(data?: PartialMessage<GetOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersRequest {
    return new GetOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersRequest | PlainMessage<GetOrdersRequest> | undefined, b: GetOrdersRequest | PlainMessage<GetOrdersRequest> | undefined): boolean {
    return proto3.util.equals(GetOrdersRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetOrdersResponse
 */
export class GetOrdersResponse extends Message<GetOrdersResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.Order orders = 1;
   */
  orders: Order[] = [];

  constructor(data?: PartialMessage<GetOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersResponse {
    return new GetOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersResponse | PlainMessage<GetOrdersResponse> | undefined, b: GetOrdersResponse | PlainMessage<GetOrdersResponse> | undefined): boolean {
    return proto3.util.equals(GetOrdersResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetOrderResponse
 */
export class GetOrderResponse extends Message<GetOrderResponse> {
  /**
   * @generated from field: cafelogos.pos.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<GetOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderResponse {
    return new GetOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderResponse {
    return new GetOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderResponse {
    return new GetOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderResponse | PlainMessage<GetOrderResponse> | undefined, b: GetOrderResponse | PlainMessage<GetOrderResponse> | undefined): boolean {
    return proto3.util.equals(GetOrderResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetUnpaidOrdersBySeatIdRequest
 */
export class GetUnpaidOrdersBySeatIdRequest extends Message<GetUnpaidOrdersBySeatIdRequest> {
  /**
   * @generated from field: string seat_id = 1;
   */
  seatId = "";

  constructor(data?: PartialMessage<GetUnpaidOrdersBySeatIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetUnpaidOrdersBySeatIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seat_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnpaidOrdersBySeatIdRequest {
    return new GetUnpaidOrdersBySeatIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnpaidOrdersBySeatIdRequest {
    return new GetUnpaidOrdersBySeatIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnpaidOrdersBySeatIdRequest {
    return new GetUnpaidOrdersBySeatIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnpaidOrdersBySeatIdRequest | PlainMessage<GetUnpaidOrdersBySeatIdRequest> | undefined, b: GetUnpaidOrdersBySeatIdRequest | PlainMessage<GetUnpaidOrdersBySeatIdRequest> | undefined): boolean {
    return proto3.util.equals(GetUnpaidOrdersBySeatIdRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostOrderRequest
 */
export class PostOrderRequest extends Message<PostOrderRequest> {
  /**
   * @generated from field: cafelogos.pos.OrderParam order = 1;
   */
  order?: OrderParam;

  constructor(data?: PartialMessage<PostOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: OrderParam },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrderRequest {
    return new PostOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrderRequest | PlainMessage<PostOrderRequest> | undefined, b: PostOrderRequest | PlainMessage<PostOrderRequest> | undefined): boolean {
    return proto3.util.equals(PostOrderRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostOrderResponse
 */
export class PostOrderResponse extends Message<PostOrderResponse> {
  /**
   * @generated from field: cafelogos.pos.PostOrderResponse.Code code = 1;
   */
  code = PostOrderResponse_Code.OK;

  /**
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  /**
   * @generated from field: string call_number = 3;
   */
  callNumber = "";

  constructor(data?: PartialMessage<PostOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(PostOrderResponse_Code) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "call_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostOrderResponse {
    return new PostOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostOrderResponse {
    return new PostOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostOrderResponse {
    return new PostOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostOrderResponse | PlainMessage<PostOrderResponse> | undefined, b: PostOrderResponse | PlainMessage<PostOrderResponse> | undefined): boolean {
    return proto3.util.equals(PostOrderResponse, a, b);
  }
}

/**
 * @generated from enum cafelogos.pos.PostOrderResponse.Code
 */
export enum PostOrderResponse_Code {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: SOLD_OUT_PRODUCT = 1;
   */
  SOLD_OUT_PRODUCT = 1,

  /**
   * @generated from enum value: NOT_SOLD_PRODUCT = 2;
   */
  NOT_SOLD_PRODUCT = 2,

  /**
   * @generated from enum value: OTHER = 3;
   */
  OTHER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PostOrderResponse_Code)
proto3.util.setEnumType(PostOrderResponse_Code, "cafelogos.pos.PostOrderResponse.Code", [
  { no: 0, name: "OK" },
  { no: 1, name: "SOLD_OUT_PRODUCT" },
  { no: 2, name: "NOT_SOLD_PRODUCT" },
  { no: 3, name: "OTHER" },
]);

/**
 * @generated from message cafelogos.pos.PostPaymentRequest
 */
export class PostPaymentRequest extends Message<PostPaymentRequest> {
  /**
   * @generated from field: cafelogos.pos.Payment payment = 1;
   */
  payment?: Payment;

  constructor(data?: PartialMessage<PostPaymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostPaymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payment", kind: "message", T: Payment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostPaymentRequest {
    return new PostPaymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostPaymentRequest {
    return new PostPaymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostPaymentRequest {
    return new PostPaymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostPaymentRequest | PlainMessage<PostPaymentRequest> | undefined, b: PostPaymentRequest | PlainMessage<PostPaymentRequest> | undefined): boolean {
    return proto3.util.equals(PostPaymentRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.UpdatePaymentRequest
 */
export class UpdatePaymentRequest extends Message<UpdatePaymentRequest> {
  /**
   * @generated from field: cafelogos.pos.Payment payment = 1;
   */
  payment?: Payment;

  constructor(data?: PartialMessage<UpdatePaymentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.UpdatePaymentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payment", kind: "message", T: Payment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePaymentRequest {
    return new UpdatePaymentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePaymentRequest {
    return new UpdatePaymentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePaymentRequest {
    return new UpdatePaymentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePaymentRequest | PlainMessage<UpdatePaymentRequest> | undefined, b: UpdatePaymentRequest | PlainMessage<UpdatePaymentRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePaymentRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PaymentResponse
 */
export class PaymentResponse extends Message<PaymentResponse> {
  /**
   * @generated from field: bool is_ok = 1;
   */
  isOk = false;

  /**
   * @generated from field: cafelogos.pos.Payment payment = 2;
   */
  payment?: Payment;

  /**
   * @generated from field: repeated cafelogos.pos.PostOrderResponse order_responses = 3;
   */
  orderResponses: PostOrderResponse[] = [];

  constructor(data?: PartialMessage<PaymentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PaymentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "payment", kind: "message", T: Payment },
    { no: 3, name: "order_responses", kind: "message", T: PostOrderResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PaymentResponse {
    return new PaymentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PaymentResponse {
    return new PaymentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PaymentResponse {
    return new PaymentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PaymentResponse | PlainMessage<PaymentResponse> | undefined, b: PaymentResponse | PlainMessage<PaymentResponse> | undefined): boolean {
    return proto3.util.equals(PaymentResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.DeleteOrderRequest
 */
export class DeleteOrderRequest extends Message<DeleteOrderRequest> {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  constructor(data?: PartialMessage<DeleteOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.DeleteOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrderRequest {
    return new DeleteOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrderRequest {
    return new DeleteOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrderRequest {
    return new DeleteOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrderRequest | PlainMessage<DeleteOrderRequest> | undefined, b: DeleteOrderRequest | PlainMessage<DeleteOrderRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrderRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetProductsResponse
 */
export class GetProductsResponse extends Message<GetProductsResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.Product products = 1;
   */
  products: Product[] = [];

  constructor(data?: PartialMessage<GetProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "message", T: Product, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsResponse {
    return new GetProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsResponse | PlainMessage<GetProductsResponse> | undefined, b: GetProductsResponse | PlainMessage<GetProductsResponse> | undefined): boolean {
    return proto3.util.equals(GetProductsResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetProductCategoriesResponse
 */
export class GetProductCategoriesResponse extends Message<GetProductCategoriesResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.ProductCategory product_categories = 1;
   */
  productCategories: ProductCategory[] = [];

  constructor(data?: PartialMessage<GetProductCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetProductCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_categories", kind: "message", T: ProductCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductCategoriesResponse {
    return new GetProductCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductCategoriesResponse | PlainMessage<GetProductCategoriesResponse> | undefined, b: GetProductCategoriesResponse | PlainMessage<GetProductCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetProductCategoriesResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostProductCategoryRequest
 */
export class PostProductCategoryRequest extends Message<PostProductCategoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PostProductCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostProductCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostProductCategoryRequest {
    return new PostProductCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostProductCategoryRequest | PlainMessage<PostProductCategoryRequest> | undefined, b: PostProductCategoryRequest | PlainMessage<PostProductCategoryRequest> | undefined): boolean {
    return proto3.util.equals(PostProductCategoryRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostProductRequest
 */
export class PostProductRequest extends Message<PostProductRequest> {
  /**
   * @generated from field: cafelogos.pos.ProductParam product = 1;
   */
  product?: ProductParam;

  constructor(data?: PartialMessage<PostProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product", kind: "message", T: ProductParam },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostProductRequest {
    return new PostProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostProductRequest {
    return new PostProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostProductRequest {
    return new PostProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostProductRequest | PlainMessage<PostProductRequest> | undefined, b: PostProductRequest | PlainMessage<PostProductRequest> | undefined): boolean {
    return proto3.util.equals(PostProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.UpdateProductRequest
 */
export class UpdateProductRequest extends Message<UpdateProductRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: cafelogos.pos.ProductParam product = 2;
   */
  product?: ProductParam;

  constructor(data?: PartialMessage<UpdateProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.UpdateProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product", kind: "message", T: ProductParam },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProductRequest {
    return new UpdateProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProductRequest | PlainMessage<UpdateProductRequest> | undefined, b: UpdateProductRequest | PlainMessage<UpdateProductRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.DeleteProductRequest
 */
export class DeleteProductRequest extends Message<DeleteProductRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  constructor(data?: PartialMessage<DeleteProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.DeleteProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProductRequest {
    return new DeleteProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProductRequest | PlainMessage<DeleteProductRequest> | undefined, b: DeleteProductRequest | PlainMessage<DeleteProductRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProductRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostStockRequest
 */
export class PostStockRequest extends Message<PostStockRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  constructor(data?: PartialMessage<PostStockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostStockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostStockRequest {
    return new PostStockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostStockRequest {
    return new PostStockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostStockRequest {
    return new PostStockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostStockRequest | PlainMessage<PostStockRequest> | undefined, b: PostStockRequest | PlainMessage<PostStockRequest> | undefined): boolean {
    return proto3.util.equals(PostStockRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetStocksResponse
 */
export class GetStocksResponse extends Message<GetStocksResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.Stock stocks = 1;
   */
  stocks: Stock[] = [];

  constructor(data?: PartialMessage<GetStocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetStocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stocks", kind: "message", T: Stock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStocksResponse {
    return new GetStocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStocksResponse | PlainMessage<GetStocksResponse> | undefined, b: GetStocksResponse | PlainMessage<GetStocksResponse> | undefined): boolean {
    return proto3.util.equals(GetStocksResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostCoffeeBeanRequest
 */
export class PostCoffeeBeanRequest extends Message<PostCoffeeBeanRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 gram_quantity = 2;
   */
  gramQuantity = 0;

  constructor(data?: PartialMessage<PostCoffeeBeanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostCoffeeBeanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gram_quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostCoffeeBeanRequest {
    return new PostCoffeeBeanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostCoffeeBeanRequest | PlainMessage<PostCoffeeBeanRequest> | undefined, b: PostCoffeeBeanRequest | PlainMessage<PostCoffeeBeanRequest> | undefined): boolean {
    return proto3.util.equals(PostCoffeeBeanRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetCoffeeBeansResponse
 */
export class GetCoffeeBeansResponse extends Message<GetCoffeeBeansResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.CoffeeBean coffee_beans = 1;
   */
  coffeeBeans: CoffeeBean[] = [];

  constructor(data?: PartialMessage<GetCoffeeBeansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetCoffeeBeansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coffee_beans", kind: "message", T: CoffeeBean, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCoffeeBeansResponse {
    return new GetCoffeeBeansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCoffeeBeansResponse | PlainMessage<GetCoffeeBeansResponse> | undefined, b: GetCoffeeBeansResponse | PlainMessage<GetCoffeeBeansResponse> | undefined): boolean {
    return proto3.util.equals(GetCoffeeBeansResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostSeatRequest
 */
export class PostSeatRequest extends Message<PostSeatRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PostSeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostSeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostSeatRequest {
    return new PostSeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostSeatRequest {
    return new PostSeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostSeatRequest {
    return new PostSeatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostSeatRequest | PlainMessage<PostSeatRequest> | undefined, b: PostSeatRequest | PlainMessage<PostSeatRequest> | undefined): boolean {
    return proto3.util.equals(PostSeatRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.UpdateSeatRequest
 */
export class UpdateSeatRequest extends Message<UpdateSeatRequest> {
  /**
   * @generated from field: cafelogos.pos.Seat seat = 1;
   */
  seat?: Seat;

  constructor(data?: PartialMessage<UpdateSeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.UpdateSeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seat", kind: "message", T: Seat },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSeatRequest {
    return new UpdateSeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSeatRequest {
    return new UpdateSeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSeatRequest {
    return new UpdateSeatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSeatRequest | PlainMessage<UpdateSeatRequest> | undefined, b: UpdateSeatRequest | PlainMessage<UpdateSeatRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSeatRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetSeatsResponse
 */
export class GetSeatsResponse extends Message<GetSeatsResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.Seat seats = 1;
   */
  seats: Seat[] = [];

  constructor(data?: PartialMessage<GetSeatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetSeatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seats", kind: "message", T: Seat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSeatsResponse {
    return new GetSeatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSeatsResponse {
    return new GetSeatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSeatsResponse {
    return new GetSeatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSeatsResponse | PlainMessage<GetSeatsResponse> | undefined, b: GetSeatsResponse | PlainMessage<GetSeatsResponse> | undefined): boolean {
    return proto3.util.equals(GetSeatsResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostNewClientRequest
 */
export class PostNewClientRequest extends Message<PostNewClientRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PostNewClientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostNewClientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostNewClientRequest {
    return new PostNewClientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostNewClientRequest {
    return new PostNewClientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostNewClientRequest {
    return new PostNewClientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostNewClientRequest | PlainMessage<PostNewClientRequest> | undefined, b: PostNewClientRequest | PlainMessage<PostNewClientRequest> | undefined): boolean {
    return proto3.util.equals(PostNewClientRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostNewClientResponse
 */
export class PostNewClientResponse extends Message<PostNewClientResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<PostNewClientResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostNewClientResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostNewClientResponse {
    return new PostNewClientResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostNewClientResponse {
    return new PostNewClientResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostNewClientResponse {
    return new PostNewClientResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostNewClientResponse | PlainMessage<PostNewClientResponse> | undefined, b: PostNewClientResponse | PlainMessage<PostNewClientResponse> | undefined): boolean {
    return proto3.util.equals(PostNewClientResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.UpdateClientRequest
 */
export class UpdateClientRequest extends Message<UpdateClientRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateClientRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.UpdateClientRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateClientRequest {
    return new UpdateClientRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateClientRequest {
    return new UpdateClientRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateClientRequest {
    return new UpdateClientRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateClientRequest | PlainMessage<UpdateClientRequest> | undefined, b: UpdateClientRequest | PlainMessage<UpdateClientRequest> | undefined): boolean {
    return proto3.util.equals(UpdateClientRequest, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.GetDiscountsResponse
 */
export class GetDiscountsResponse extends Message<GetDiscountsResponse> {
  /**
   * @generated from field: repeated cafelogos.pos.Discount discounts = 1;
   */
  discounts: Discount[] = [];

  constructor(data?: PartialMessage<GetDiscountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.GetDiscountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "discounts", kind: "message", T: Discount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDiscountsResponse {
    return new GetDiscountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDiscountsResponse {
    return new GetDiscountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDiscountsResponse {
    return new GetDiscountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDiscountsResponse | PlainMessage<GetDiscountsResponse> | undefined, b: GetDiscountsResponse | PlainMessage<GetDiscountsResponse> | undefined): boolean {
    return proto3.util.equals(GetDiscountsResponse, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.PostDiscountRequest
 */
export class PostDiscountRequest extends Message<PostDiscountRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: cafelogos.pos.DiscountType type = 2;
   */
  type = DiscountType.PRICE;

  /**
   * @generated from field: uint64 discount_price = 3;
   */
  discountPrice = protoInt64.zero;

  constructor(data?: PartialMessage<PostDiscountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.PostDiscountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(DiscountType) },
    { no: 3, name: "discount_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostDiscountRequest {
    return new PostDiscountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostDiscountRequest {
    return new PostDiscountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostDiscountRequest {
    return new PostDiscountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostDiscountRequest | PlainMessage<PostDiscountRequest> | undefined, b: PostDiscountRequest | PlainMessage<PostDiscountRequest> | undefined): boolean {
    return proto3.util.equals(PostDiscountRequest, a, b);
  }
}

/**
 * * Product 
 *
 * @generated from message cafelogos.pos.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string product_name = 2;
   */
  productName = "";

  /**
   * @generated from field: cafelogos.pos.ProductCategory product_category = 3;
   */
  productCategory?: ProductCategory;

  /**
   * @generated from field: cafelogos.pos.ProductType product_type = 4;
   */
  productType = ProductType.COFFEE;

  /**
   * @generated from field: string product_color = 5;
   */
  productColor = "";

  /**
   * @generated from field: bool is_now_sales = 6;
   */
  isNowSales = false;

  /**
   * @generated from field: string created_at = 7;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 8;
   */
  updatedAt = "";

  /**
   * Only Coffee
   *
   * @generated from field: cafelogos.pos.CoffeeBean coffee_bean = 9;
   */
  coffeeBean?: CoffeeBean;

  /**
   * @generated from field: repeated cafelogos.pos.CoffeeBrew coffee_brews = 10;
   */
  coffeeBrews: CoffeeBrew[] = [];

  /**
   * Only Other
   *
   * @generated from field: uint64 amount = 11;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: cafelogos.pos.Stock stock = 12;
   */
  stock?: Stock;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_category", kind: "message", T: ProductCategory },
    { no: 4, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 5, name: "product_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_now_sales", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "coffee_bean", kind: "message", T: CoffeeBean },
    { no: 10, name: "coffee_brews", kind: "message", T: CoffeeBrew, repeated: true },
    { no: 11, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "stock", kind: "message", T: Stock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.ProductParam
 */
export class ProductParam extends Message<ProductParam> {
  /**
   * @generated from field: string product_name = 1;
   */
  productName = "";

  /**
   * @generated from field: string product_category_id = 2;
   */
  productCategoryId = "";

  /**
   * @generated from field: cafelogos.pos.ProductType product_type = 3;
   */
  productType = ProductType.COFFEE;

  /**
   * @generated from field: bool is_now_sales = 4;
   */
  isNowSales = false;

  /**
   * @generated from field: string product_color = 5;
   */
  productColor = "";

  /**
   * Only Coffee
   *
   * @generated from field: string coffee_bean_id = 6;
   */
  coffeeBeanId = "";

  /**
   * @generated from field: repeated cafelogos.pos.CoffeeBrew coffee_brews = 7;
   */
  coffeeBrews: CoffeeBrew[] = [];

  /**
   * Only Other
   *
   * @generated from field: uint64 amount = 8;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string stock_id = 9;
   */
  stockId = "";

  constructor(data?: PartialMessage<ProductParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.ProductParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_category_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_type", kind: "enum", T: proto3.getEnumType(ProductType) },
    { no: 4, name: "is_now_sales", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "product_color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "coffee_bean_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "coffee_brews", kind: "message", T: CoffeeBrew, repeated: true },
    { no: 8, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "stock_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductParam {
    return new ProductParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductParam {
    return new ProductParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductParam {
    return new ProductParam().fromJsonString(jsonString, options);
  }

  static equals(a: ProductParam | PlainMessage<ProductParam> | undefined, b: ProductParam | PlainMessage<ProductParam> | undefined): boolean {
    return proto3.util.equals(ProductParam, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.ProductCategory
 */
export class ProductCategory extends Message<ProductCategory> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string created_at = 3;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 4;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<ProductCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.ProductCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCategory {
    return new ProductCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCategory | PlainMessage<ProductCategory> | undefined, b: ProductCategory | PlainMessage<ProductCategory> | undefined): boolean {
    return proto3.util.equals(ProductCategory, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.CoffeeBean
 */
export class CoffeeBean extends Message<CoffeeBean> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: int32 gram_quantity = 3;
   */
  gramQuantity = 0;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 5;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<CoffeeBean>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.CoffeeBean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gram_quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoffeeBean {
    return new CoffeeBean().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoffeeBean {
    return new CoffeeBean().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoffeeBean {
    return new CoffeeBean().fromJsonString(jsonString, options);
  }

  static equals(a: CoffeeBean | PlainMessage<CoffeeBean> | undefined, b: CoffeeBean | PlainMessage<CoffeeBean> | undefined): boolean {
    return proto3.util.equals(CoffeeBean, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.CoffeeBrew
 */
export class CoffeeBrew extends Message<CoffeeBrew> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 bean_quantity_grams = 3;
   */
  beanQuantityGrams = 0;

  /**
   * @generated from field: uint64 amount = 4;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<CoffeeBrew>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.CoffeeBrew";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bean_quantity_grams", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoffeeBrew {
    return new CoffeeBrew().fromJsonString(jsonString, options);
  }

  static equals(a: CoffeeBrew | PlainMessage<CoffeeBrew> | undefined, b: CoffeeBrew | PlainMessage<CoffeeBrew> | undefined): boolean {
    return proto3.util.equals(CoffeeBrew, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.Stock
 */
export class Stock extends Message<Stock> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 quantity = 3;
   */
  quantity = 0;

  /**
   * @generated from field: string created_at = 4;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 5;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Stock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Stock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stock {
    return new Stock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stock {
    return new Stock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stock {
    return new Stock().fromJsonString(jsonString, options);
  }

  static equals(a: Stock | PlainMessage<Stock> | undefined, b: Stock | PlainMessage<Stock> | undefined): boolean {
    return proto3.util.equals(Stock, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated cafelogos.pos.OrderItem items = 2;
   */
  items: OrderItem[] = [];

  /**
   * @generated from field: repeated cafelogos.pos.OrderDiscount discounts = 3;
   */
  discounts: OrderDiscount[] = [];

  /**
   * @generated from field: cafelogos.pos.OrderType order_type = 4;
   */
  orderType = OrderType.EatIn;

  /**
   * @generated from field: string order_at = 5;
   */
  orderAt = "";

  /**
   * @generated from field: string call_number = 6;
   */
  callNumber = "";

  /**
   * @generated from field: string client_id = 7;
   */
  clientId = "";

  /**
   * @generated from field: string seat_name = 8;
   */
  seatName = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: OrderItem, repeated: true },
    { no: 3, name: "discounts", kind: "message", T: OrderDiscount, repeated: true },
    { no: 4, name: "order_type", kind: "enum", T: proto3.getEnumType(OrderType) },
    { no: 5, name: "order_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "call_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "seat_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.OrderParam
 */
export class OrderParam extends Message<OrderParam> {
  /**
   * * 代入した場合は代入したIDが使用され、しなかったら生成される 
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated cafelogos.pos.OrderItem items = 2;
   */
  items: OrderItem[] = [];

  /**
   * @generated from field: repeated cafelogos.pos.OrderDiscount discounts = 3;
   */
  discounts: OrderDiscount[] = [];

  /**
   * @generated from field: cafelogos.pos.OrderType order_type = 4;
   */
  orderType = OrderType.EatIn;

  /**
   * @generated from field: string order_at = 5;
   */
  orderAt = "";

  /**
   * @generated from field: string client_id = 6;
   */
  clientId = "";

  /**
   * @generated from field: string seat_id = 7;
   */
  seatId = "";

  constructor(data?: PartialMessage<OrderParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.OrderParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "message", T: OrderItem, repeated: true },
    { no: 3, name: "discounts", kind: "message", T: OrderDiscount, repeated: true },
    { no: 4, name: "order_type", kind: "enum", T: proto3.getEnumType(OrderType) },
    { no: 5, name: "order_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "seat_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderParam {
    return new OrderParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderParam {
    return new OrderParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderParam {
    return new OrderParam().fromJsonString(jsonString, options);
  }

  static equals(a: OrderParam | PlainMessage<OrderParam> | undefined, b: OrderParam | PlainMessage<OrderParam> | undefined): boolean {
    return proto3.util.equals(OrderParam, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: uint64 amount = 3;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string coffee_brew_id = 4;
   */
  coffeeBrewId = "";

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "coffee_brew_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.OrderDiscount
 */
export class OrderDiscount extends Message<OrderDiscount> {
  /**
   * * 一旦何も入ってない 
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string discount_id = 2;
   */
  discountId = "";

  /**
   * @generated from field: cafelogos.pos.DiscountType type = 3;
   */
  type = DiscountType.PRICE;

  /**
   * @generated from field: uint64 discount_price = 4;
   */
  discountPrice = protoInt64.zero;

  constructor(data?: PartialMessage<OrderDiscount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.OrderDiscount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "discount_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(DiscountType) },
    { no: 4, name: "discount_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderDiscount {
    return new OrderDiscount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderDiscount {
    return new OrderDiscount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderDiscount {
    return new OrderDiscount().fromJsonString(jsonString, options);
  }

  static equals(a: OrderDiscount | PlainMessage<OrderDiscount> | undefined, b: OrderDiscount | PlainMessage<OrderDiscount> | undefined): boolean {
    return proto3.util.equals(OrderDiscount, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.Discount
 */
export class Discount extends Message<Discount> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: cafelogos.pos.DiscountType type = 3;
   */
  type = DiscountType.PRICE;

  /**
   * @generated from field: uint64 discount_price = 4;
   */
  discountPrice = protoInt64.zero;

  constructor(data?: PartialMessage<Discount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Discount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(DiscountType) },
    { no: 4, name: "discount_price", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Discount {
    return new Discount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Discount {
    return new Discount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Discount {
    return new Discount().fromJsonString(jsonString, options);
  }

  static equals(a: Discount | PlainMessage<Discount> | undefined, b: Discount | PlainMessage<Discount> | undefined): boolean {
    return proto3.util.equals(Discount, a, b);
  }
}

/**
 * @generated from message cafelogos.pos.Payment
 */
export class Payment extends Message<Payment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: cafelogos.pos.Payment.PaymentType type = 2;
   */
  type = Payment_PaymentType.CASH;

  /**
   * @generated from field: uint64 receive_amount = 3;
   */
  receiveAmount = protoInt64.zero;

  /**
   * @generated from field: uint64 payment_amount = 4;
   */
  paymentAmount = protoInt64.zero;

  /**
   * @generated from field: uint64 change_amount = 5;
   */
  changeAmount = protoInt64.zero;

  /**
   * @generated from field: string payment_at = 6;
   */
  paymentAt = "";

  /**
   * @generated from field: string updated_at = 7;
   */
  updatedAt = "";

  /**
   * @generated from field: repeated cafelogos.pos.OrderParam post_orders = 8;
   */
  postOrders: OrderParam[] = [];

  /**
   * @generated from field: repeated string order_ids = 9;
   */
  orderIds: string[] = [];

  constructor(data?: PartialMessage<Payment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Payment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Payment_PaymentType) },
    { no: 3, name: "receive_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "payment_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "change_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "payment_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "post_orders", kind: "message", T: OrderParam, repeated: true },
    { no: 9, name: "order_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payment {
    return new Payment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payment {
    return new Payment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payment {
    return new Payment().fromJsonString(jsonString, options);
  }

  static equals(a: Payment | PlainMessage<Payment> | undefined, b: Payment | PlainMessage<Payment> | undefined): boolean {
    return proto3.util.equals(Payment, a, b);
  }
}

/**
 * @generated from enum cafelogos.pos.Payment.PaymentType
 */
export enum Payment_PaymentType {
  /**
   * @generated from enum value: CASH = 0;
   */
  CASH = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(Payment_PaymentType)
proto3.util.setEnumType(Payment_PaymentType, "cafelogos.pos.Payment.PaymentType", [
  { no: 0, name: "CASH" },
]);

/**
 * @generated from message cafelogos.pos.Seat
 */
export class Seat extends Message<Seat> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Seat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cafelogos.pos.Seat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Seat {
    return new Seat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Seat {
    return new Seat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Seat {
    return new Seat().fromJsonString(jsonString, options);
  }

  static equals(a: Seat | PlainMessage<Seat> | undefined, b: Seat | PlainMessage<Seat> | undefined): boolean {
    return proto3.util.equals(Seat, a, b);
  }
}

