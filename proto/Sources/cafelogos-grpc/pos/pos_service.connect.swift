// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: pos/pos_service.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Cafelogos_Pos_PosServiceClientInterface: Sendable {

    @discardableResult
    func `getOrders`(request: Cafelogos_Pos_GetOrdersRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetOrdersResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getOrders`(request: Cafelogos_Pos_GetOrdersRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetOrdersResponse>

    @discardableResult
    func `getUnpaidOrdersBySeatID`(request: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetOrdersResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getUnpaidOrdersBySeatID`(request: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetOrdersResponse>

    @discardableResult
    func `postOrder`(request: Cafelogos_Pos_PostOrderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PostOrderResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postOrder`(request: Cafelogos_Pos_PostOrderRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_PostOrderResponse>

    @discardableResult
    func `deleteOrder`(request: Cafelogos_Pos_DeleteOrderRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteOrder`(request: Cafelogos_Pos_DeleteOrderRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `postPayment`(request: Cafelogos_Pos_PostPaymentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PaymentResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postPayment`(request: Cafelogos_Pos_PostPaymentRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_PaymentResponse>

    @discardableResult
    func `updatePayment`(request: Cafelogos_Pos_UpdatePaymentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PaymentResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updatePayment`(request: Cafelogos_Pos_UpdatePaymentRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_PaymentResponse>

    @discardableResult
    func `getExternalPayment`(request: Cafelogos_Pos_GetExternalPaymentRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetExternalPaymentResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getExternalPayment`(request: Cafelogos_Pos_GetExternalPaymentRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetExternalPaymentResponse>

    @discardableResult
    func `getProducts`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProducts`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetProductsResponse>

    @discardableResult
    func `postNewClient`(request: Cafelogos_Pos_PostNewClientRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PostNewClientResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postNewClient`(request: Cafelogos_Pos_PostNewClientRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_PostNewClientResponse>

    @discardableResult
    func `updateClient`(request: Cafelogos_Pos_UpdateClientRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateClient`(request: Cafelogos_Pos_UpdateClientRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    /// Only Admin
    @discardableResult
    func `getProductCategories`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductCategoriesResponse>) -> Void) -> Connect.Cancelable

    /// Only Admin
    @available(iOS 13, *)
    func `getProductCategories`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetProductCategoriesResponse>

    @discardableResult
    func `postProductCategory`(request: Cafelogos_Pos_PostProductCategoryRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postProductCategory`(request: Cafelogos_Pos_PostProductCategoryRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `postProduct`(request: Cafelogos_Pos_PostProductRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postProduct`(request: Cafelogos_Pos_PostProductRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `updateProduct`(request: Cafelogos_Pos_UpdateProductRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateProduct`(request: Cafelogos_Pos_UpdateProductRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `deleteProduct`(request: Cafelogos_Pos_DeleteProductRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteProduct`(request: Cafelogos_Pos_DeleteProductRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `postStock`(request: Cafelogos_Pos_PostStockRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postStock`(request: Cafelogos_Pos_PostStockRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `getStocks`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetStocksResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getStocks`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetStocksResponse>

    @discardableResult
    func `updateStock`(request: Cafelogos_Pos_UpdateStockRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateStock`(request: Cafelogos_Pos_UpdateStockRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `postCoffeeBean`(request: Cafelogos_Pos_PostCoffeeBeanRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postCoffeeBean`(request: Cafelogos_Pos_PostCoffeeBeanRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `getCoffeeBeans`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetCoffeeBeansResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getCoffeeBeans`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetCoffeeBeansResponse>

    @discardableResult
    func `deleteAllOrders`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteAllOrders`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `postSeat`(request: Cafelogos_Pos_PostSeatRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postSeat`(request: Cafelogos_Pos_PostSeatRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `updateSeat`(request: Cafelogos_Pos_UpdateSeatRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `updateSeat`(request: Cafelogos_Pos_UpdateSeatRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `deleteSeat`(request: Cafelogos_Pos_DeleteSeatRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `deleteSeat`(request: Cafelogos_Pos_DeleteSeatRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `getSeats`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSeatsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getSeats`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetSeatsResponse>

    @discardableResult
    func `getDiscounts`(request: Cafelogos_Common_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetDiscountsResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getDiscounts`(request: Cafelogos_Common_Empty, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetDiscountsResponse>

    @discardableResult
    func `postDiscount`(request: Cafelogos_Pos_PostDiscountRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `postDiscount`(request: Cafelogos_Pos_PostDiscountRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Common_Empty>

    @discardableResult
    func `getDailySales`(request: Cafelogos_Pos_GetDailySalesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetDailySalesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getDailySales`(request: Cafelogos_Pos_GetDailySalesRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetDailySalesResponse>

    @discardableResult
    func `getProductSales`(request: Cafelogos_Pos_GetProductSalesRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductSalesResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getProductSales`(request: Cafelogos_Pos_GetProductSalesRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetProductSalesResponse>

    /// 売上分析用のメソッド
    @discardableResult
    func `getSalesByTimeSlot`(request: Cafelogos_Pos_GetSalesByTimeSlotRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSalesByTimeSlotResponse>) -> Void) -> Connect.Cancelable

    /// 売上分析用のメソッド
    @available(iOS 13, *)
    func `getSalesByTimeSlot`(request: Cafelogos_Pos_GetSalesByTimeSlotRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetSalesByTimeSlotResponse>

    @discardableResult
    func `getSalesByPaymentType`(request: Cafelogos_Pos_GetSalesByPaymentTypeRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSalesByPaymentTypeResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getSalesByPaymentType`(request: Cafelogos_Pos_GetSalesByPaymentTypeRequest, headers: Connect.Headers) async -> ResponseMessage<Cafelogos_Pos_GetSalesByPaymentTypeResponse>
}

/// Concrete implementation of `Cafelogos_Pos_PosServiceClientInterface`.
public final class Cafelogos_Pos_PosServiceClient: Cafelogos_Pos_PosServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `getOrders`(request: Cafelogos_Pos_GetOrdersRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetOrdersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetOrders", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getOrders`(request: Cafelogos_Pos_GetOrdersRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetOrdersResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetOrders", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getUnpaidOrdersBySeatID`(request: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetOrdersResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetUnpaidOrdersBySeatId", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getUnpaidOrdersBySeatID`(request: Cafelogos_Pos_GetUnpaidOrdersBySeatIdRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetOrdersResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetUnpaidOrdersBySeatId", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postOrder`(request: Cafelogos_Pos_PostOrderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PostOrderResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostOrder", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postOrder`(request: Cafelogos_Pos_PostOrderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_PostOrderResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostOrder", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteOrder`(request: Cafelogos_Pos_DeleteOrderRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/DeleteOrder", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteOrder`(request: Cafelogos_Pos_DeleteOrderRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/DeleteOrder", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postPayment`(request: Cafelogos_Pos_PostPaymentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PaymentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostPayment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postPayment`(request: Cafelogos_Pos_PostPaymentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_PaymentResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostPayment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updatePayment`(request: Cafelogos_Pos_UpdatePaymentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PaymentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/UpdatePayment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updatePayment`(request: Cafelogos_Pos_UpdatePaymentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_PaymentResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/UpdatePayment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getExternalPayment`(request: Cafelogos_Pos_GetExternalPaymentRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetExternalPaymentResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetExternalPayment", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getExternalPayment`(request: Cafelogos_Pos_GetExternalPaymentRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetExternalPaymentResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetExternalPayment", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProducts`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetProducts", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProducts`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetProductsResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetProducts", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postNewClient`(request: Cafelogos_Pos_PostNewClientRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_PostNewClientResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostNewClient", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postNewClient`(request: Cafelogos_Pos_PostNewClientRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_PostNewClientResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostNewClient", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateClient`(request: Cafelogos_Pos_UpdateClientRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/UpdateClient", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateClient`(request: Cafelogos_Pos_UpdateClientRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/UpdateClient", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProductCategories`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductCategoriesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetProductCategories", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProductCategories`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetProductCategoriesResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetProductCategories", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postProductCategory`(request: Cafelogos_Pos_PostProductCategoryRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostProductCategory", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postProductCategory`(request: Cafelogos_Pos_PostProductCategoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostProductCategory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postProduct`(request: Cafelogos_Pos_PostProductRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostProduct", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postProduct`(request: Cafelogos_Pos_PostProductRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostProduct", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateProduct`(request: Cafelogos_Pos_UpdateProductRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/UpdateProduct", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateProduct`(request: Cafelogos_Pos_UpdateProductRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/UpdateProduct", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteProduct`(request: Cafelogos_Pos_DeleteProductRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/DeleteProduct", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteProduct`(request: Cafelogos_Pos_DeleteProductRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/DeleteProduct", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postStock`(request: Cafelogos_Pos_PostStockRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostStock", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postStock`(request: Cafelogos_Pos_PostStockRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostStock", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getStocks`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetStocksResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetStocks", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getStocks`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetStocksResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetStocks", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateStock`(request: Cafelogos_Pos_UpdateStockRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/UpdateStock", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateStock`(request: Cafelogos_Pos_UpdateStockRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/UpdateStock", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postCoffeeBean`(request: Cafelogos_Pos_PostCoffeeBeanRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostCoffeeBean", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postCoffeeBean`(request: Cafelogos_Pos_PostCoffeeBeanRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostCoffeeBean", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getCoffeeBeans`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetCoffeeBeansResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetCoffeeBeans", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getCoffeeBeans`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetCoffeeBeansResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetCoffeeBeans", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteAllOrders`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/DeleteAllOrders", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteAllOrders`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/DeleteAllOrders", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postSeat`(request: Cafelogos_Pos_PostSeatRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostSeat", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postSeat`(request: Cafelogos_Pos_PostSeatRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostSeat", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `updateSeat`(request: Cafelogos_Pos_UpdateSeatRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/UpdateSeat", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `updateSeat`(request: Cafelogos_Pos_UpdateSeatRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/UpdateSeat", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `deleteSeat`(request: Cafelogos_Pos_DeleteSeatRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/DeleteSeat", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `deleteSeat`(request: Cafelogos_Pos_DeleteSeatRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/DeleteSeat", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getSeats`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSeatsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetSeats", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSeats`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetSeatsResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetSeats", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getDiscounts`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetDiscountsResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetDiscounts", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getDiscounts`(request: Cafelogos_Common_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetDiscountsResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetDiscounts", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `postDiscount`(request: Cafelogos_Pos_PostDiscountRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Common_Empty>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/PostDiscount", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `postDiscount`(request: Cafelogos_Pos_PostDiscountRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Common_Empty> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/PostDiscount", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getDailySales`(request: Cafelogos_Pos_GetDailySalesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetDailySalesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetDailySales", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getDailySales`(request: Cafelogos_Pos_GetDailySalesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetDailySalesResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetDailySales", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getProductSales`(request: Cafelogos_Pos_GetProductSalesRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetProductSalesResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetProductSales", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getProductSales`(request: Cafelogos_Pos_GetProductSalesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetProductSalesResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetProductSales", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getSalesByTimeSlot`(request: Cafelogos_Pos_GetSalesByTimeSlotRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSalesByTimeSlotResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetSalesByTimeSlot", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSalesByTimeSlot`(request: Cafelogos_Pos_GetSalesByTimeSlotRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetSalesByTimeSlotResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetSalesByTimeSlot", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `getSalesByPaymentType`(request: Cafelogos_Pos_GetSalesByPaymentTypeRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Cafelogos_Pos_GetSalesByPaymentTypeResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/cafelogos.pos.PosService/GetSalesByPaymentType", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getSalesByPaymentType`(request: Cafelogos_Pos_GetSalesByPaymentTypeRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Cafelogos_Pos_GetSalesByPaymentTypeResponse> {
        return await self.client.unary(path: "/cafelogos.pos.PosService/GetSalesByPaymentType", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let getOrders = Connect.MethodSpec(name: "GetOrders", service: "cafelogos.pos.PosService", type: .unary)
            public static let getUnpaidOrdersBySeatID = Connect.MethodSpec(name: "GetUnpaidOrdersBySeatId", service: "cafelogos.pos.PosService", type: .unary)
            public static let postOrder = Connect.MethodSpec(name: "PostOrder", service: "cafelogos.pos.PosService", type: .unary)
            public static let deleteOrder = Connect.MethodSpec(name: "DeleteOrder", service: "cafelogos.pos.PosService", type: .unary)
            public static let postPayment = Connect.MethodSpec(name: "PostPayment", service: "cafelogos.pos.PosService", type: .unary)
            public static let updatePayment = Connect.MethodSpec(name: "UpdatePayment", service: "cafelogos.pos.PosService", type: .unary)
            public static let getExternalPayment = Connect.MethodSpec(name: "GetExternalPayment", service: "cafelogos.pos.PosService", type: .unary)
            public static let getProducts = Connect.MethodSpec(name: "GetProducts", service: "cafelogos.pos.PosService", type: .unary)
            public static let postNewClient = Connect.MethodSpec(name: "PostNewClient", service: "cafelogos.pos.PosService", type: .unary)
            public static let updateClient = Connect.MethodSpec(name: "UpdateClient", service: "cafelogos.pos.PosService", type: .unary)
            public static let getProductCategories = Connect.MethodSpec(name: "GetProductCategories", service: "cafelogos.pos.PosService", type: .unary)
            public static let postProductCategory = Connect.MethodSpec(name: "PostProductCategory", service: "cafelogos.pos.PosService", type: .unary)
            public static let postProduct = Connect.MethodSpec(name: "PostProduct", service: "cafelogos.pos.PosService", type: .unary)
            public static let updateProduct = Connect.MethodSpec(name: "UpdateProduct", service: "cafelogos.pos.PosService", type: .unary)
            public static let deleteProduct = Connect.MethodSpec(name: "DeleteProduct", service: "cafelogos.pos.PosService", type: .unary)
            public static let postStock = Connect.MethodSpec(name: "PostStock", service: "cafelogos.pos.PosService", type: .unary)
            public static let getStocks = Connect.MethodSpec(name: "GetStocks", service: "cafelogos.pos.PosService", type: .unary)
            public static let updateStock = Connect.MethodSpec(name: "UpdateStock", service: "cafelogos.pos.PosService", type: .unary)
            public static let postCoffeeBean = Connect.MethodSpec(name: "PostCoffeeBean", service: "cafelogos.pos.PosService", type: .unary)
            public static let getCoffeeBeans = Connect.MethodSpec(name: "GetCoffeeBeans", service: "cafelogos.pos.PosService", type: .unary)
            public static let deleteAllOrders = Connect.MethodSpec(name: "DeleteAllOrders", service: "cafelogos.pos.PosService", type: .unary)
            public static let postSeat = Connect.MethodSpec(name: "PostSeat", service: "cafelogos.pos.PosService", type: .unary)
            public static let updateSeat = Connect.MethodSpec(name: "UpdateSeat", service: "cafelogos.pos.PosService", type: .unary)
            public static let deleteSeat = Connect.MethodSpec(name: "DeleteSeat", service: "cafelogos.pos.PosService", type: .unary)
            public static let getSeats = Connect.MethodSpec(name: "GetSeats", service: "cafelogos.pos.PosService", type: .unary)
            public static let getDiscounts = Connect.MethodSpec(name: "GetDiscounts", service: "cafelogos.pos.PosService", type: .unary)
            public static let postDiscount = Connect.MethodSpec(name: "PostDiscount", service: "cafelogos.pos.PosService", type: .unary)
            public static let getDailySales = Connect.MethodSpec(name: "GetDailySales", service: "cafelogos.pos.PosService", type: .unary)
            public static let getProductSales = Connect.MethodSpec(name: "GetProductSales", service: "cafelogos.pos.PosService", type: .unary)
            public static let getSalesByTimeSlot = Connect.MethodSpec(name: "GetSalesByTimeSlot", service: "cafelogos.pos.PosService", type: .unary)
            public static let getSalesByPaymentType = Connect.MethodSpec(name: "GetSalesByPaymentType", service: "cafelogos.pos.PosService", type: .unary)
        }
    }
}
